// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with authentication and profile fields
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  name        String?
  bio         String?
  avatar      String?
  coverPhoto  String?
  location    String?
  website     String?
  verified    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes     Like[]
  followers Follower[] @relation("following")
  following Follower[] @relation("follower")
  
  notificationsSent     Notification[] @relation("sender")
  notificationsReceived Notification[] @relation("recipient")
}

model Post {
  id        String   @id @default(cuid())
  content   String?
  file      String?        // Single file path (backward compatibility)
  files     String[] @default([])  // Array of all file paths
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Notification {
  id          String   @id @default(cuid())
  type        String   // "like", "comment", "follow", "mention"
  content     String?
  senderId    String
  recipientId String
  postId      String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  sender    User  @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient User  @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  post      Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([senderId])
  @@index([postId])
  @@index([isRead])
  @@index([createdAt])
}
