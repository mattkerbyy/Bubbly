services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: bubbly-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-bubbly_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bubbly_password}
      POSTGRES_DB: ${POSTGRES_DB:-bubbly_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back-end/prisma/migrations:/docker-entrypoint-initdb.d/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bubbly}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bubbly-network

  # Backend API
  backend:
    build:
      context: ./back-end
      dockerfile: Dockerfile
    container_name: bubbly-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-5000}:5000"
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://${POSTGRES_USER:-bubbly}:${POSTGRES_PASSWORD:-bubbly_password}@postgres:5432/${POSTGRES_DB:-bubbly_db}?schema=public
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-your-email@gmail.com}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-your-app-password}
      EMAIL_FROM: ${EMAIL_FROM:-Bubbly <noreply@bubbly.com>}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      - ./back-end/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - bubbly-network
    command: >
      sh -c "npx prisma migrate deploy && node src/server.js"

  # Frontend React App
  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api}
    container_name: bubbly-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - backend
    networks:
      - bubbly-network

  # Adminer (Database Management Tool)
  adminer:
    image: adminer:latest
    container_name: bubbly-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - bubbly-network
    profiles:
      - tools

networks:
  bubbly-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
